generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())

  name                  String                  @unique
  birthday              DateTime?
  gender                Gender?
  profileImagePath      String?                 @map("profile_image_path")

  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")

  lastLoginAt           DateTime                @default(now()) @map("last_login_at")

  bookSaves             BookSave[]
  review                Review[]
  reviewLikes           ReviewLike[]
  readingLog            ReadingLog[]
  notifications         Notification[]
  readingStreakHistory  ReadingStreakHistory[]
  sentenceLikes         SentenceLike[]

  @@map("user")
}

model Book {
  id                    Int                     @id @default(autoincrement())

  title                 String
  author                String

  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")

  views                 Int                     @default(0)
  totalPagesCount       Int                     @default(0)
  isbn                  String?

  savedBy               BookSave[]
  review                Review[]
  pages                 Page[]
  logs                  ReadingLog[]
  sentenceLikes         SentenceLike[]
  recommend             Recommend[]
  rankingHistory        BookRanking[]

  @@map("book")
}

model BookSave {
  id                    Int                     @id @default(autoincrement())
  userId                String
  bookId                Int

  createdAt             DateTime                @default(now()) @map("created_at")

  book   Book @relation(fields: [bookId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
  @@map("book_save")
}

model Review {
  id           Int       @id @default(autoincrement())
  userId       String
  bookId       Int
  content      String
  rating       Decimal   @db.Decimal(2, 1)
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  likedBy      ReviewLike[]

  book         Book      @relation(fields: [bookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("review")
}

model ReviewLike {
  id           Int       @id @default(autoincrement())
  userId       String
  reviewId     Int

  user         User      @relation(fields: [userId], references: [id])
  review       Review    @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId])

  @@map("review_like")
}

model Page {
  id                    Int                     @id @default(autoincrement())
  content               String
  number                Int
  bookId                Int

  book                  Book                    @relation(fields: [bookId], references: [id])

  readingLog            ReadingLog[]
  sentenceLikes         SentenceLike[]

  @@map("page")
}

model ReadingLog {
  id              Int           @id @default(autoincrement())

  userId          String        @map("user_id")
  bookId          Int           @map("book_id")
  pageId          Int           @map("page_id")
  pageNumber      Int           @map("page_number")             

  startedAt       DateTime?                        @map("started_at")
  endedAt         DateTime?                        @map("ended_at")
  durationSec     Int?                             @map("duration_sec")

  user      User       @relation(fields: [userId], references: [id])
  book      Book       @relation(fields: [bookId], references: [id])
  page      Page       @relation(fields: [pageId], references: [id])

  @@index([userId, startedAt])
  @@index([userId, endedAt])
  @@index([userId, bookId, startedAt])

  // 페이지 단위 조회
  @@index([bookId, pageId, startedAt])

  @@map("reading_log")
}


model Notification {
  id           Int                  @id @default(autoincrement())
  userId       String               @map("user_id")
  targetType   NotificationTarget   @map("target_type")
  targetId     Int                  @map("target_id")       

  enabled      Boolean              @default(true)  @map("enabled")
  muted        Boolean              @default(false) @map("muted")

  minuteOfDay  Int?                 @map("minute_of_day")    // 0..1439 (현지 기준)

  lastNotifiedAt DateTime?          @map("last_notified_at")

  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt      @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, targetType, targetId])

  @@index([enabled])
  @@index([userId, targetType, targetId])

  @@map("notification")
}

model ReadingStreakHistory {
  id          Int          @id @default(autoincrement())
  userId      String       @map("user_id") @unique
  days        Int          @default(0) @map("days")         // 갱신된 최장 연속일

  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, updatedAt])
  @@map("reading_streak_history")
}

model SentenceLike {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  bookId     Int      @map("book_id")
  pageId     Int      @map("page_id")
  
  text       String   @map("text")
  startIndex Int      @map("start_index")
  endIndex   Int      @map("end_index")

  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
  page Page @relation(fields: [pageId], references: [id])
  
  @@unique([id, userId])
  @@unique([userId, pageId, text])

  @@index([userId, createdAt])
  @@index([bookId, pageId])
  
  @@map("sentence_like")
}

model Recommend {
  id         Int      @id @default(autoincrement())
  bookId     Int      @map("book_id")

  book Book @relation(fields: [bookId], references: [id])

  @@map("recommend")
}

model BookRanking {
  id            Int      @id @default(autoincrement())
  bookId        Int      @map("book_id")
  rank          Int      // 해당 시점의 순위
  views         Int      // 해당 시점의 조회수
  calculatedAt  DateTime @map("calculated_at") // 랭킹 집계 시점

  book Book @relation(fields: [bookId], references: [id])

  @@unique([calculatedAt, bookId])  // 특정 시점에 동일한 책이 중복 저장되는 것을 방지
  @@index([calculatedAt, rank])     // 특정 시점의 랭킹을 빠르게 조회하기 위한 인덱스
  @@map("book_ranking")
}


// ── enums ───────────────────────────────────────────────

enum Gender {
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
}

enum NotificationTarget {
  CHALLENGE
}
