generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())

  name                  String                  @unique
  birthday              DateTime?
  gender                Gender?
  profileImagePath      String?                 @map("profile_image_path")

  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")

  lastLoginAt           DateTime                @default(now()) @map("last_login_at")

  bookSaves             BookSave[]
  review                Review[]
  reviewLikes           ReviewLike[]
  readingLog            ReadingLog[]
  challenge             Challenge[]  
  challengeJoin         ChallengeJoin[]
  notifications         Notification[]
  readingStreakHistory  ReadingStreakHistory[]
  notes                 ChallengeNote[]
  noteLikes             ChallengeNoteLike[]
  noteComments          ChallengeNoteComment[]
  sentenceLikes         SentenceLike[]

  @@map("user")
}

model Book {
  id                    Int                     @id @default(autoincrement())

  title                 String
  author                String

  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")

  views                 Int                     @default(0)
  totalPagesCount       Int                     @default(0)
  isbn                  String?

  savedBy               BookSave[]
  review                Review[]
  pages                 Page[]
  logs                  ReadingLog[]
  challenges            Challenge[]
  sentenceLikes         SentenceLike[]

  @@map("book")
}

model BookSave {
  id                    Int                     @id @default(autoincrement())
  userId                String
  bookId                Int

  createdAt             DateTime                @default(now()) @map("created_at")

  book   Book @relation(fields: [bookId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
  @@map("book-save")
}

model Review {
  id           Int       @id @default(autoincrement())
  userId       String
  bookId       Int
  content      String
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  likedBy      ReviewLike[]

  book         Book      @relation(fields: [bookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("review")
}

model ReviewLike {
  id           Int       @id @default(autoincrement())
  userId       String
  reviewId     Int

  user         User      @relation(fields: [userId], references: [id])
  review       Review    @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId])

  @@map("review-like")
}

model Page {
  id                    Int                     @id @default(autoincrement())
  content               String
  number                Int
  bookId                Int

  book                  Book                    @relation(fields: [bookId], references: [id])

  readingLog            ReadingLog[]
  sentenceLikes         SentenceLike[]

  @@map("page")
}

model ReadingLog {
  id              Int           @id @default(autoincrement())

  userId          String        @map("user_id")
  bookId          Int           @map("book_id")
  pageId          Int           @map("page_id")

  pageNumber      Int           @map("page_number")

  participantId   Int?          @map("participant_id")             

  startedAt       DateTime?                        @map("started_at")
  endedAt         DateTime?                        @map("ended_at")
  durationSec     Int?                             @map("duration_sec")

  user      User       @relation(fields: [userId], references: [id])
  book      Book       @relation(fields: [bookId], references: [id])
  page      Page       @relation(fields: [pageId], references: [id])
  join      ChallengeJoin? @relation(fields: [participantId], references: [id])

  @@index([userId, startedAt])
  @@index([userId, endedAt])
  @@index([userId, bookId, startedAt])

  // 페이지 단위 조회
  @@index([bookId, pageId, startedAt])

  // 챌린지 전용 조회(랭킹/진척)
  @@index([participantId, startedAt])

  @@map("reading-log")
}

model Challenge {
  id            Int                @id @default(autoincrement())
  name          String                                 @map("name")              
  hostId        String                                 @map("host_id")
  bookId        Int                                    @map("book_id")
     
  visibility    ChallengeVisibility                    @map("visibility") 

  startTime     DateTime                               @map("start_at")
  endTime       DateTime                               @map("end_at")

  completedAt   DateTime?                              @map("completed_at")
  cancelledAt   DateTime?                              @map("cancelled_at")

  createdAt     DateTime             @default(now())   @map("created_at")  

  book   Book @relation(fields: [bookId], references: [id])
  host   User @relation(fields: [hostId], references: [id])
  challengeJoin  ChallengeJoin[]
  notes          ChallengeNote[]

  @@index([visibility, startTime])
  @@index([bookId])
  @@index([hostId])
  @@map("challenge")
}

model ChallengeJoin {
  id              Int       @id @default(autoincrement())
  challengeId     Int       @map("challenge_id")
  userId          String    @map("user_id")

  joinedAt        DateTime  @default(now()) @map("joined_at")

  leftAt          DateTime? @map("left_at")             
  status          ParticipantStatus  @map("status") 

  challenge  Challenge    @relation(fields: [challengeId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  logs       ReadingLog[]


  @@unique([challengeId, userId])        // 중복 참가 방지
  @@index([userId])
  
  @@map("challenge_join")
}

model Notification {
  id           Int                  @id @default(autoincrement())
  userId       String               @map("user_id")
  targetType   NotificationTarget   @map("target_type")
  targetId     Int                  @map("target_id")       

  enabled      Boolean              @default(true)  @map("enabled")
  muted        Boolean              @default(false) @map("muted")

  minuteOfDay  Int?                 @map("minute_of_day")    // 0..1439 (현지 기준)

  lastNotifiedAt DateTime?          @map("last_notified_at")

  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt      @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, targetType, targetId])

  @@index([enabled])
  @@index([userId, targetType, targetId])

  @@map("notification")
}

model ReadingStreakHistory {
  id          Int          @id @default(autoincrement())

  userId      String       @map("user_id") @unique

  days        Int          @default(0) @map("days")         // 갱신된 최장 연속일

  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, updatedAt])
  @@map("reading_streak_history")
}


model ChallengeNote {
  id           Int      @id @default(autoincrement())

  challengeId  Int      @map("challenge_id")
  authorId     String   @map("author_id")      // 작성자(User.id)

  body         String   @map("body")
  imagePath    String?  @map("image_path")

  quoteText    String?  @map("quote_text")
  quoteBookId  Int?     @map("quote_book_id")
  quotePageId  Int?     @map("quote_page_id")

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  
  challenge Challenge  @relation(fields: [challengeId], references: [id])
  author    User       @relation(fields: [authorId], references: [id])

  likes    ChallengeNoteLike[]
  comments ChallengeNoteComment[]

  @@index([challengeId, createdAt])
  @@index([authorId, createdAt])

  @@map("challenge_note")
}


model ChallengeNoteLike {
  id      Int    @id @default(autoincrement())
  noteId  Int    @map("note_id")
  userId  String @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  note ChallengeNote @relation(fields: [noteId], references: [id])
  user User          @relation(fields: [userId], references: [id])

  @@unique([noteId, userId])
  @@index([userId, noteId])
  @@map("challenge_note_like")
}


model ChallengeNoteComment {
  id       Int     @id @default(autoincrement())
  noteId   Int     @map("note_id")
  userId   String  @map("user_id")
  content  String  @map("content")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  note ChallengeNote @relation(fields: [noteId], references: [id])
  user User          @relation(fields: [userId], references: [id])

  @@index([noteId, createdAt])
  @@index([userId, createdAt])
  @@map("challenge_note_comment")
}


model SentenceLike {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  bookId     Int      @map("book_id")
  pageId     Int      @map("page_id")
  
  text       String   @map("text")

  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
  page Page @relation(fields: [pageId], references: [id])
  
  @@unique([id, userId])
  @@unique([userId, pageId, text])

  @@index([userId, createdAt])
  @@index([bookId, pageId])
  
  @@map("sentence_like")
}


// ── enums ───────────────────────────────────────────────

enum Gender {
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
}

enum ChallengeVisibility {
  PUBLIC
  PRIVATE
}

enum ParticipantStatus {
  JOINED     // 정상 참여 중
  LEFT       // 자의/강제 이탈
}

enum NotificationTarget {
  CHALLENGE
}
